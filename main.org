#+title: Main

This document describes the VariaMos Semantic Translator.
It is an interactive notebook written in Org-Mode with python literate programming features.
It is similar to but more powerful than Jupyter notebooks since it is fully customizable and it provides a superior code editing experience.

* Introduction
The purpose of this software is to take in VariaMos-formatted JSON with a model
of some type, and, using a set of transformation rules:
(a) generate a machine-interpretable represenation of the model;
(b) execute the model in the chosen langugage;
(c) and, return any diagnostic info to VariaMos.

We now turn to defining where we will find our files for processing:

#+begin_src python :session s1 :results none :tangle no
FILE = "/Users/ccr185/workspace/semantic_translator/json/vmosfm.json"
SG = "/Users/ccr185/workspace/semantic_translator/sam/correct_model.json"
SB = "/Users/ccr185/workspace/semantic_translator/sam/wrong_model.json"
RULES = "/Users/ccr185/workspace/semantic_translator/json/fmrules.json"
#+end_src

#+RESULTS:

* Function for transforming the templates
Now that we have our imports and files, we shall create a set of functions that will perform the transformation of a given constraint template into the necessary text:

#+begin_src python :session s1 :results none :tangle main.py
import json
import re
from minizinc import Instance, Model, Solver
from prolog_bridge import prolog_solve, prolog_update_model
from minizinc_bridge import minizinc_solve, minizinc_update_model
from grammars.hlvl import parse_hlvl

def replaceWithPattern(pattern, string, occ, v):
    if type(v) is not str and string is not None:
        # print(v.items())
        # print(string)
        [string := string.replace(occ, str(val)) for (k, val) in v.items()]
        # print('OK')
        return string

def replaceExprs(bundle, elems, rels, cons, params, complexT):
    """
    This function replaces the first and second expressions for a bundle's constraint.
    """
    f = [
        iden
        for (k, r) in rels.items()
        for ((iden,_), _) in elems.items()
        if (
            str(r["sourceId"]) == str(iden) and
            str(r["targetId"]) == str(bundle["id"])
        )
    ]
    # replace constraint for principal param
    fs = [
        iden
        for ((iden, _), elem)
        in elems.items()
        if (
            [
                rel
                for (_,rel) in rels.items()
                if rel["sourceId"] == bundle["id"] and
                    rel["targetId"] == iden
            ]
        )
    ]
    fs = ["UUID_" + ef.replace("-","_") for ef in fs if (ef not in f)]
    # print(fs)
    # print(bundle)
    pattern = {
        "F": f[0],
        "Xs": {
            "sum":" + ".join(fs),
            "len": str(len(fs))
        }
    }
    cons = str(cons).replace(
        params[0],
        "UUID_" + pattern[params[0]].replace("-","_")
    )
    funs = r"(" + r"|".join(complexT["functions"]) + r")"
    regex_paren = funs + r"\(" + re.escape(params[1]) + r"\)"
    occs = set([
        oc.group(0)
        for oc in re.finditer(regex_paren, cons)
    ])
    [
        cons := cons.replace(
            occ,
            pattern[params[1]][
                re.compile(regex_paren).search(occ).group(1)
            ]
        )
        for occ in occs
    ]
    print(bundle["properties"][1]["type"])
    # handle special range case.
    if bundle["properties"][1]["value"] == "Range":
        ranges = {
         "min": bundle["properties"][2]["value"],
         "max": bundle["properties"][3]["value"]
        }
        [cons := cons.replace(params[i], ranges[params[i]]) for i in range(2,len(params))]
    return cons



def bundleCons(bundle, elems, rels, language, rules):
    """
    This is an auxiliary function that builds the request to replaceExprs
    """
    # get constraint rule
    rule = rules["elementTranslationRules"][language]["Bundle"]
    cons = rule["constraint"][bundle["properties"][1]["value"]]
    complexTrans = rules["complexElemTranslations"]
    return replaceExprs(bundle, elems, rels, cons, rule["param"], complexTrans)


def mapBundles(elems, rels, language, rules):
    """
    This function collects all the strings related to the bundles
    (it is the only portion of this module that is custom to feature models)
    """
    return [
        bundleCons(bs, elems, rels, language, rules)
        for bs in [
            e if e["type"] == "Bundle" else None for ((iden, typ), e) in elems.items()
        ]
        if bs is not None
    ]


def mapVar(element, rule):
    """Maps an element into a constraint according to the rules"""
    # return rule
    template = rule['constraint']
    if bool(rule):
        if 'selected_constraint' in rule and 'deselected_constraint' in rule:
            if 'Selected' in element['properties'][1]['value']:
                template = rule['selected_constraint']
            elif 'Unselected' in element['properties'][1]['value']:
                template = rule['deselected_constraint']

        constraint = (
            template.replace(
                rule["param"], str(element["id"]).replace("-", "_")
            )
            ,#+ f'% {element["type"]} â†’ {element["id"]}'
        )
        return constraint
    # If not bool(rule) then return None


def mapVars(elems, language, rules):
    """This function collects all strings related to a set of elements and translation rules"""
    return [
        cs
        for cs in [
            mapVar(element, rules["elementTranslationRules"][language][typ])
            if (typ in rules["elementTypes"])
            else None
            for ((ident, typ), element) in elems.items()
        ]
        if cs is not None
    ]


def mapCons(relation, rule):
    """This function maps a relation into a constraint according to the rules"""
    if bool(rule):
        acc = rule["constraint"]
        [
            acc := acc.replace(
                p,
                str(
                    relation[("source" if p == rule["params"][0] else "target") + "Id"]
                ).replace("-", "_"),
            )
            for p in rule["params"]
        ]
        return acc


def mapRels(relations, language, rules):
    """This function collects all strings related to a set of relations and translation rules"""
    return [
        rs
        for rs in [
            mapCons(
                v, rules["relationTranslationRules"][language][v["properties"][0]["value"]]
            )
            for (k, v) in [
                (k, rel) for (k, rel) in relations.items() if rel["properties"]
            ]
            if (v["properties"][0]["value"] in rules["relationTypes"])
        ]
        if rs is not None
    ]
#+end_src

Next we need to construct our result; we define therefore a function that takes in the
model and the rule file and both generates the constraints and gets a solution from the solver:

#+begin_src python :session s1 :results none :exports none :tangle main.py
class SolverException(Exception):
    pass


def run(model, rules, language, dry, selectedModelId):
    """This function takes in a model, a set of rules and a language to translate to and runs the procedure"""
    # Get the feature model @ /productLines[0]/domainEngineering/models[0]
    idx, fm = next(filter(lambda mod: mod[1]['id'] == selectedModelId, enumerate(model["productLines"][0]["domainEngineering"]["models"])))
    # Get the elements
    elementsMap = {(e["id"], e["type"]): e for e in fm["elements"]}
    # Get the relationships
    relationsMap = {r["id"]: r for r in fm["relationships"]}
    # Map the constraints for the vars
    constraints = (
        mapVars(elementsMap, language, rules)
        + mapRels(relationsMap, language, rules)
        + mapBundles(elementsMap, relationsMap, language, rules)
        # + ["solve satisfy;"]
    )
    if language == 'minizinc':
        result = minizinc_solve(constraints)
        # If no solution is found
        # the second element of the tuple is
        # None
        if not result.status.has_solution():
            raise SolverException('MZN - Model is UNSAT')
        elif not dry:
            minizinc_update_model(fm, rules, result)
        else:
            return 'MZN - SAT check OK'
    elif language == 'swi':
        result = prolog_solve(constraints)
        if result is False:
            raise SolverException('SWI - Model is UNSAT')
        elif not dry:
            prolog_update_model(fm, rules, result)
        else:
            return 'SWI - SAT check OK'
    elif language == 'HLVL':
        pass
    else:
        raise RuntimeError("Unrecognized Language")
    print(result)
    # print(constraints)
    # print("-----------------------MODEL--------------------------------")
    # print("\n".join([c for c in constraints]))
    # # Add model and solver
    # gecode = Solver.lookup("gecode")
    # mzn_model = Model()
    # mzn_model.add_string("\n".join([c for c in constraints]))
    # instance = Instance(gecode, mzn_model)
    # result = instance.solve()
    # print("----------------------/MODEL--------------------------------")
    #return result
    # Now lets update the model based on the result

    #if not dry:
    model["productLines"][0]["domainEngineering"]["models"][idx] = fm
    return model
#+end_src

In order to have the solver results available within VariaMos we need to make it so the
solver results are made effective on the JSON exported by VariaMos.

#+begin_src python :session s1 :results none :exports none :tangle main.py
def update_model(model, rules, result):
    for e in model["elements"]:
        if e["type"] in rules["elementTypes"]:
            e["properties"][1]["value"] = "Selected" if result["UUID_" +  str(e["id"]).replace("-","_")] == 1 else  "Unselected"
#+end_src

We also define a function that allows us to test things locally before exposing our code to the server.

#+begin_src python :session s1 :results output :exports both :tangle no
def test():
    """Test function locally"""
    # Load file
    with open(SB, "r") as f:
        # Load json as obj
        model = json.load(f)
        # Create the rules
        with open(RULES, "r") as r:
            rules = json.load(r)
            x = run(model, rules, 'minizinc')
            print("-----------------------RESULTS------------------------------")
            print(x)
            print("----------------------/RESULTS------------------------------")

test()
#+end_src

#+RESULTS:
#+begin_example
String
String
String
-----------------------MODEL--------------------------------
var 1..1:'uuid_b53cd688_c5da_41d1_bb51_1ec0ee9b1ac2';% RootFeature -> b53cd688-c5da-41d1-bb51-1ec0ee9b1ac2
var 0..1:'uuid_f8424aa8_ae79_4209_bf55_b98d63eb2620';% ConcreteFeature -> f8424aa8-ae79-4209-bf55-b98d63eb2620
var 0..1:'uuid_621b90ff_8a8d_4cbb_b14b_c55ab9c4dc79';% ConcreteFeature -> 621b90ff-8a8d-4cbb-b14b-c55ab9c4dc79
var 0..1:'uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c';% AbstractFeature -> 211e1ba8-731b-46eb-970b-27f9fe8e0b0c
var 0..1:'uuid_49144228_b0ee_4c60_93f7_7452c609e38d';% AbstractFeature -> 49144228-b0ee-4c60-93f7-7452c609e38d
var 0..1:'uuid_e21bf9c3_6e77_4239_8bcc_295bbe3f3de3';% AbstractFeature -> e21bf9c3-6e77-4239-8bcc-295bbe3f3de3
var 0..1:'uuid_bd320074_1542_4a80_9c28_d86d019d1202';% ConcreteFeature -> bd320074-1542-4a80-9c28-d86d019d1202
var 0..1:'uuid_7291b9d1_5351_4dd9_acea_8c5bc397b559';% ConcreteFeature -> 7291b9d1-5351-4dd9-acea-8c5bc397b559
var 0..1:'uuid_bd98a477_24ab_46d8_91fd_50387c5f360a';% ConcreteFeature -> bd98a477-24ab-46d8-91fd-50387c5f360a
var 0..1:'uuid_6758f906_0a80_4baf_ba7a_92fcf6c8be16';% ConcreteFeature -> 6758f906-0a80-4baf-ba7a-92fcf6c8be16
var 0..1:'uuid_d0d74bbf_b219_4f9e_8c3c_d47fb3b23861';% ConcreteFeature -> d0d74bbf-b219-4f9e-8c3c-d47fb3b23861
var 0..1:'uuid_60e092bf_9e99_4156_95f1_1fb321451f95';% ConcreteFeature -> 60e092bf-9e99-4156-95f1-1fb321451f95
var 0..1:'uuid_e4592c17_1223_4bae_9168_3912ecfabf04';% ConcreteFeature -> e4592c17-1223-4bae-9168-3912ecfabf04
var 0..1:'uuid_fe41da02_20d2_400f_b47d_88bcd75b85c6';% ConcreteFeature -> fe41da02-20d2-400f-b47d-88bcd75b85c6
var 0..1:'uuid_2babe7e3_dfbd_432b_8e2a_27c70a53a513';% ConcreteFeature -> 2babe7e3-dfbd-432b-8e2a-27c70a53a513
var 0..1:'uuid_449305af_22d3_49aa_84fc_cb522cd6b87d';% ConcreteFeature -> 449305af-22d3-49aa-84fc-cb522cd6b87d
constraint :: "b53cd688_c5da_41d1_bb51_1ec0ee9b1ac2 mandatory f8424aa8_ae79_4209_bf55_b98d63eb2620" (uuid_b53cd688_c5da_41d1_bb51_1ec0ee9b1ac2 == uuid_f8424aa8_ae79_4209_bf55_b98d63eb2620);
constraint :: "b53cd688_c5da_41d1_bb51_1ec0ee9b1ac2 mandatory 621b90ff_8a8d_4cbb_b14b_c55ab9c4dc79" (uuid_b53cd688_c5da_41d1_bb51_1ec0ee9b1ac2 == uuid_621b90ff_8a8d_4cbb_b14b_c55ab9c4dc79);
constraint :: "211e1ba8_731b_46eb_970b_27f9fe8e0b0c excludes 49144228_b0ee_4c60_93f7_7452c609e38d" not (uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c == 1 /\ uuid_49144228_b0ee_4c60_93f7_7452c609e38d == 1);
constraint :: "621b90ff_8a8d_4cbb_b14b_c55ab9c4dc79 mandatory e21bf9c3_6e77_4239_8bcc_295bbe3f3de3" (uuid_621b90ff_8a8d_4cbb_b14b_c55ab9c4dc79 == uuid_e21bf9c3_6e77_4239_8bcc_295bbe3f3de3);
constraint :: "e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 mandatory bd320074_1542_4a80_9c28_d86d019d1202" (uuid_e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 == uuid_bd320074_1542_4a80_9c28_d86d019d1202);
constraint :: "e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 optional 7291b9d1_5351_4dd9_acea_8c5bc397b559" (uuid_e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 >= uuid_7291b9d1_5351_4dd9_acea_8c5bc397b559);
constraint :: "bd320074_1542_4a80_9c28_d86d019d1202 includes 7291b9d1_5351_4dd9_acea_8c5bc397b559" (uuid_bd320074_1542_4a80_9c28_d86d019d1202 == 1) -> (uuid_7291b9d1_5351_4dd9_acea_8c5bc397b559 == 1);
constraint :: "e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 mandatory bd98a477_24ab_46d8_91fd_50387c5f360a" (uuid_e21bf9c3_6e77_4239_8bcc_295bbe3f3de3 == uuid_bd98a477_24ab_46d8_91fd_50387c5f360a);
constraint :: "7291b9d1_5351_4dd9_acea_8c5bc397b559 excludes bd98a477_24ab_46d8_91fd_50387c5f360a" not (uuid_7291b9d1_5351_4dd9_acea_8c5bc397b559 == 1 /\ uuid_bd98a477_24ab_46d8_91fd_50387c5f360a == 1);
constraint :: "d0d74bbf_b219_4f9e_8c3c_d47fb3b23861 includes 6758f906_0a80_4baf_ba7a_92fcf6c8be16" (uuid_d0d74bbf_b219_4f9e_8c3c_d47fb3b23861 == 1) -> (uuid_6758f906_0a80_4baf_ba7a_92fcf6c8be16 == 1);
constraint :: "49144228_b0ee_4c60_93f7_7452c609e38d mandatory 60e092bf_9e99_4156_95f1_1fb321451f95" (uuid_49144228_b0ee_4c60_93f7_7452c609e38d == uuid_60e092bf_9e99_4156_95f1_1fb321451f95);
constraint :: "bd320074_1542_4a80_9c28_d86d019d1202 excludes e4592c17_1223_4bae_9168_3912ecfabf04" not (uuid_bd320074_1542_4a80_9c28_d86d019d1202 == 1 /\ uuid_e4592c17_1223_4bae_9168_3912ecfabf04 == 1);
constraint :: "uuid_f8424aa8_ae79_4209_bf55_b98d63eb2620 AND Xs" (uuid_f8424aa8_ae79_4209_bf55_b98d63eb2620 == 1) -> (2 == uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c + uuid_49144228_b0ee_4c60_93f7_7452c609e38d);
constraint :: "uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c XOR Xs" (uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c == 1) -> (uuid_211e1ba8_731b_46eb_970b_27f9fe8e0b0c == uuid_6758f906_0a80_4baf_ba7a_92fcf6c8be16 + uuid_d0d74bbf_b219_4f9e_8c3c_d47fb3b23861);
constraint :: "group cardinality uuid_bd98a477_24ab_46d8_91fd_50387c5f360as" (uuid_bd98a477_24ab_46d8_91fd_50387c5f360a == 1) -> ((uuid_bd98a477_24ab_46d8_91fd_50387c5f360a * 1 <= uuid_e4592c17_1223_4bae_9168_3912ecfabf04 + uuid_fe41da02_20d2_400f_b47d_88bcd75b85c6 + uuid_2babe7e3_dfbd_432b_8e2a_27c70a53a513 + uuid_449305af_22d3_49aa_84fc_cb522cd6b87d) /\ (uuid_e4592c17_1223_4bae_9168_3912ecfabf04 + uuid_fe41da02_20d2_400f_b47d_88bcd75b85c6 + uuid_2babe7e3_dfbd_432b_8e2a_27c70a53a513 + uuid_449305af_22d3_49aa_84fc_cb522cd6b87d <= uuid_bd98a477_24ab_46d8_91fd_50387c5f360a * 3));
solve satisfy;
----------------------/MODEL--------------------------------
-----------------------RESULTS------------------------------
None
----------------------/RESULTS------------------------------
#+end_example
