
//Grammar
Model:
    "model" name=Name
    ("options:" options+=Option)?
    ("relations:" relations+=Relation)?
;

Option:
    Choice | Enum | Set | Att ;

Choice:
    "choice"
    name=Name
    (multiplicity=Multiplicity)?
    (comment=CommentExpr)?
;

Enum:
    "enum"
    name=Name
    (multiplicity=Multiplicity)?
    "domain" domain=Domain
    (comment=CommentExpr)?
;

Set:
    "set"
    name=Name
    (multiplicity=Multiplicity)?
    "domain" domain=Domain
    (comment=CommentExpr)?
;

Att:
    AttDom | AttIs ;

AttDom:
    "att"
    type=Type
    name=Name
    "domain" domain=Domain
    (comment=CommentExpr)?
;

AttIs:
    "att"
    type=Type
    name=Name
    "is"
    literal=Literal
    (comment=CommentExpr)?
;

Domain:
    NumericBounds | EnumeratedDomain ;

NumericBounds:
    upper=NumericLiteral
    ".."
    lower=NumericLiteral
;

EnumeratedDomain:
    "[" literals+=Literal[','] "]" ;

Relation:
    (name=Name ":")?
    relation=VariabilityRelation
;

VariabilityRelation:
    Common |
    Mutex |
    MutexSet |
    Implies |
    ImpliesSet |
    ImpliesQuant |
    Expression |
    Decomposition |
    Group |
    Visibility | //Add new rules to express single decomp
    Mandatory |
    Optional 
;

Mandatory:
    "mandatory" "(" prt=[Option] "," child=[Option] ")"
;

Optional:
    "optional" "(" prt=[Option] "," child=[Option] ")"
;

Common:
    "common" "(" choices+=[Option][','] ")"
;

Mutex:
    "mutex" "(" choices+=[Option][','] ")"
;

MutexSet:
    "mutex" "(" constraint=Constraint "," "[" choices+=[Option][','] "]" ")"
;

Implies:
    "implies" "(" condition=[Option] "," consequence=[Option] ")"
;

ImpliesSet:
    "implies" "(" constraint=Constraint "," "[" choices+=[Option][','] "]" ")"
;

ImpliesQuant:
    mult1=Multiplicity c1=[Option] "implies" mult2=Multiplicity c2=[Option]
;

Expression:
    "expression" "(" constraint=Constraint ")"
;

Decomposition:
    "decomposition"
    "(" prt=[Option] ","
    "[" choices+=[Option][','] "]" ","
    multiplicity=Multiplicity ")"
    // "[" min=INT "," max=INT "]" ")"
;



Group:
    "group"
    "(" prt=[Option] ","
    "[" choices+=[Option][','] "]" ","
    multiplicity=Multiplicity ")"
;

Visibility:
    "visibility"
    "(" constraint=Constraint ","
    "[" choices+=[Option][','] "]" ")"
;

Constraint:
    "~" BooleanExpression | BooleanExpression //| RelExpression ;
;

BooleanExpression:
    BooleanLiteral | Name //| Constraint LogicOp Constraint
;

RelExpression:
    Arithmetic RelOp Arithmetic
;

Arithmetic:
    Name |
    NumericLiteral |
    Arithmetic ArithmeticOp Arithmetic |
    UnaryFunction "(" Arithmetic ")" |
    BinaryFunction "(" Arithmetic "," Arithmetic ")"
;

LogicOp:
    "AND" | "OR" | "=>" | "<=>"
;

RelOp:
    "=" | "!=" | ">" | "<" | ">=" | "<="
;

ArithmeticOp:
    "+" | "-" | "*" | "/" | "mod"
;

UnaryFunction:
    "abs" | "sqrt"
;

BinaryFunction:
    "pow" | "min" | "max"
;

//Utility defs according to angela's thesis
Comment:
  /\/\/.*$/
;

Name:
    ID | ID "." ID
;

Type: "boolean" | "integer" | "real" | "symbol" ;

Literal:  BooleanLiteral | NumericLiteral | SymbolicLiteral ;

SymbolicLiteral: "'" STRING "'" ;

BooleanLiteral:
    "true" | "false"
;

NumericLiteral:
    INT | FLOAT
;

Multiplicity:
    "[" lower=INT "," upper=INT "]"
;

CommentExpr:
    "comment:" STRING
;
